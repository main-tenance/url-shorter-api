<?php

namespace Tests\Feature;

use App\Http\Routes\ApiRoutesProvider;
use App\Models\Link;
use Hashids\Hashids;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\Generators\LinkGenerator;
use Tests\TestCase;

/**
 * @group api
 */
class LinkTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private array $data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @group index
     */
    public function testIndex()
    {
        $cnt = 3;
        LinkGenerator::create($cnt);
        $response = $this->getJson(ApiRoutesProvider::linkIndex());
        $response->assertOk()
            ->assertJson(fn(AssertableJson $json) => $json->has('data', $cnt, fn(AssertableJson $json) => $json->whereAllType([
                'id' => 'integer',
                'long_url' => 'string',
                'short_url' => 'string',
                'title' => 'string',
                'tags' => 'array',
            ])
            ));

    }

    public function testFilledValues()
    {
        $cnt = 1;
        LinkGenerator::create($cnt);
        $first = Link::first();
        $response = $this->getJson(ApiRoutesProvider::linkIndex());
        $response->assertJson(fn(AssertableJson $json) => $json
            ->has('data', $cnt, fn(AssertableJson $json) => $json
                ->where('id', $first->id)
                ->where('long_url', $first->long_url)
                ->where('short_url', $first->short_url)
                ->where('title', $first->title)
                ->etc()
            ));
    }

    public function testStore()
    {
        $data = LinkGenerator::getData();
        $response = $this->postJson(ApiRoutesProvider::linkStore(), $data);
        $response
            ->assertCreated()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'long_url',
                    'short_url',
                    'title',
                    'tags',
                ]
            ]);
        $lastLink = Link::all()->last();
        $this->assertDatabaseHas('links', [
            'id' => $lastLink->id,
            'long_url' => $data['long_url'],
            'short_url' => (new Hashids())->encode($lastLink->id),
            'title' => $data['title'],
        ]);
        $this->assertDatabaseHas('tags', [
            'link_id' => $lastLink->id,
            'name' => $data['tags'][0],
        ]);
    }
}
